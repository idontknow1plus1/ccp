{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nArmMotor = Motor(Ports.PORT17, GearSetting.RATIO_36_1, False)\ncontroller_1 = Controller(PRIMARY)\nPusherMotor = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)\nHookMotor = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control ArmMotor\n            if controller_1.buttonL1.pressing():\n                ArmMotor.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                ArmMotor.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                ArmMotor.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control PusherMotor\n            if controller_1.buttonR1.pressing():\n                PusherMotor.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                PusherMotor.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                PusherMotor.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n            if controller_1.buttonL1.pressing():\n                HookMotor.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                HookMotor.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                HookMotor.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n\n        # wait before repeating the process\n        wait(20, MSEC)\n\n    \n        \n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject: Yoshi Python Competition Sample - Class Step 6\n#\tAuthor: AC\n#\tCreated: 10/13/2024\n#\tConfiguration:\n#   Description:\n#      Here we will implement a less twitchy drivetrain control\n#      We will also add temperature monitoring for the motors\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nremote_control_code_enabled = False\n\n# motors will slow down above certain temperatures\n# vex defines warm as 50 percent and 70 percent\nMOTOR_HOT_TEMP = 70\nMOTOR_WARM_TEMP = 50\n\n# this function checks the temperature of each motor and then return two values: warm, hot\ndef motor_temperature():\n    # to make code simple we create a list of all the motors, then check each one\n    allmotors = [left_motor_a, left_motor_b, right_motor_a, right_motor_b, ArmMotor, PusherMotor]\n    motor_is_warm = False\n    motor_is_hot = False\n    for motor in allmotors:\n        if motor.temperature(PERCENT) >= MOTOR_HOT_TEMP: motor_is_hot = True\n        elif motor.temperature(PERCENT) >= MOTOR_WARM_TEMP: motor_is_warm = True\n\n    return motor_is_warm, motor_is_hot\n\n# we run this in its own thread to monitor the temperature each second and change the color of the screen\n# blue is wam\n# red is hot\ndef monitor_motor_temperatures():\n    while True:\n        motor_is_warm, motor_is_hot = motor_temperature()\n        if (motor_is_hot): brain.screen.clear_screen(Color.RED)\n        elif (motor_is_warm): brain.screen.clear_screen(Color.BLUE)\n        wait(1,SECONDS)\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\n# constant for controller deadband\nCONTROLLER_DEADBAND = 5\n\ndef drivetrain_detwitch(speed, turn):    \n    # reduce turn sensitiviy when robot is moving slowly (turning in place)\n    speedmixLim = 50.0 # upper limit of throttle mixing (above this point, full turn allowed)\n    # NOTE: Next 2 parameters should add up to 1.0 (throttlemixMinSens + throttlemixSlope = 1.0)\n    speedmixMinSens = 0.35 # minimum turn sensitivity point (i.e. when turning in place)\n    speedmixSlope = 0.65 # rate at which turn sensitivity increases with increased throttle\n    # turnscale will be used to change how fast we can turn based on spee\n    turnscale = 1.0 # start with full turn speed\n\n    if (abs(speed) < speedmixLim):\n        speedmix = abs(speed) / speedmixLim\n        turnscale = turnscale * (speedmixMinSens + speedmixSlope * speedmix)\n\n    turn = turn * turnscale\n\n    left_speed = speed + turn\n    right_speed = speed - turn\n\n    return left_speed, right_speed\n\n# constants to convert percent to volt for drivetrain\nMOTOR_MAXVOLT = 10.9 # volts\nMOTOR_VOLTSCALE = MOTOR_MAXVOLT / 100.0\n\ndef user_control_drivetrain():\n    global drivetrain_needs_to_be_stopped_controller_1\n    # process the controller input every time this function is called\n            \n    # calculate the drivetrain motor velocities from the controller joystick axies\n    # left = axis3 + axis4\n    # right = axis3 - axis4\n    # drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n    # drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n    drivetrain_left_side_speed, drivetrain_right_side_speed = drivetrain_detwitch(controller_1.axis3.position(), controller_1.axis4.position())\n    \n    # check if the values are inside of the deadband range\n    if abs(drivetrain_left_side_speed) < CONTROLLER_DEADBAND and abs(drivetrain_right_side_speed) < CONTROLLER_DEADBAND:\n        # check if the motors have already been stopped\n        if drivetrain_needs_to_be_stopped_controller_1:\n            # stop the drive motors\n            left_drive_smart.stop()\n            right_drive_smart.stop()\n            # tell the code that the motors have been stopped\n            drivetrain_needs_to_be_stopped_controller_1 = False\n    else:\n        # reset the toggle so that the deadband code knows to stop the motors next\n        # time the input is in the deadband range\n        drivetrain_needs_to_be_stopped_controller_1 = True\n    \n    # only tell the left drive motor to spin if the values are not in the deadband range\n    if drivetrain_needs_to_be_stopped_controller_1:\n        left_drive_smart.spin(FORWARD, drivetrain_left_side_speed * MOTOR_VOLTSCALE, VOLT)\n\n    # only tell the right drive motor to spin if the values are not in the deadband range\n    if drivetrain_needs_to_be_stopped_controller_1:\n        right_drive_smart.spin(FORWARD, drivetrain_right_side_speed * MOTOR_VOLTSCALE, VOLT)\n\n# constants for arm gear ratio and motion limits\nARM_GEAR_RATIO = 84.0/12.0 # 12T gear on motor driving 84T gear on arm\n# because of gear ratio, motor needs to spin a lot more for the arm to move by each degree\nARM_MAXIMUM_UP = 75.0 * ARM_GEAR_RATIO # degrees\nARM_MAXIMUM_DOWN = -10.0 * ARM_GEAR_RATIO # degrees\n\ndef user_control_arm():\n    # process the controller input every time this function is called\n    # update the motors based on the input values\n    # calculate the arm motor velocities from the controller joystick axies\n    # up = axis 2 is negative\n    # down = axis 2 is positive\n    # note that this is opposite from the L1/L2 so we can either go to the visual code an\n    # change it or we negate the control here\n    armmotor_speed = -controller_1.axis2.position()\n    \n    # check if the values are inside of the deadband range\n    if abs(armmotor_speed) < CONTROLLER_DEADBAND:\n        armmotor_speed = 0\n    # now check if arm is at the maximum raised or lowered limit\n    elif (armmotor_speed > 0 and ArmMotor.position(DEGREES) >= ARM_MAXIMUM_UP):\n        armmotor_speed = 0\n    elif (armmotor_speed < 0 and ArmMotor.position(DEGREES) <= ARM_MAXIMUM_DOWN):\n        armmotor_speed = 0\n\n    if (armmotor_speed == 0):\n        ArmMotor.stop(HOLD)\n    else:\n        ArmMotor.set_velocity(armmotor_speed, PERCENT)\n        ArmMotor.spin(FORWARD)\n\n# constants for pusher\nPUSHER_SPROCKET_SIZE = 6 # teeth\nPUSHER_TRAVEL = 14 # chain lengths\nPUSHER_TURNS = PUSHER_TRAVEL / PUSHER_SPROCKET_SIZE # turns\nHOOK_TURNS= 5\ndef raise_pusher():\n    PusherMotor.set_velocity(100,PERCENT)\n    PusherMotor.set_stopping(HOLD) # we want the pusher to stay where it is\n    PusherMotor.set_timeout(2,SECONDS) # incase the pusher gets jammed or is not in right starting point, stop it after 2 seconds\n    PusherMotor.spin_to_position(0,TURNS,wait=True)\n\ndef lower_pusher():\n    PusherMotor.set_velocity(100,PERCENT)\n    PusherMotor.set_stopping(HOLD) # we want the pusher to stay where it is\n    PusherMotor.set_timeout(2,SECONDS) # incase the pusher gets jammed or is not in right starting point, stop it after 2 seconds\n    PusherMotor.spin_to_position(-PUSHER_TURNS,TURNS,wait=True)\n\ndef controller1_buttonR1_callback():\n    raise_pusher()\n\ndef controller1_buttonR2_callback():\n    lower_pusher()\n\ndef controller1_buttonL1_callback():\n    raise_hook()\n\ndef controller1_buttonL2_callback():\n    lower_hook()\n\ndef user_control():\n    # do helpful brain printing here\n    brain.screen.clear_screen()\n    brain.screen.print(\"user control code - class sample 6\")\n    brain.screen.next_row()\n    brain.screen.print(\"check pusher is all the way up\")\n    brain.screen.next_row()\n    brain.screen.print(\"check arm touches the ground\")\n\n    # place callbacks here\n    controller_1.buttonR1.pressed(controller1_buttonR1_callback)\n    controller_1.buttonR2.pressed(controller1_buttonR2_callback)\n    controller_1.buttonL1.pressed(controller1_buttonL1_callback)\n    controller_1.buttonL2.pressed(controller1_buttonL2_callback)\n\n    # check motor temperatures\n    temperature_monitor_thread = Thread(monitor_motor_temperatures)\n\n    # place driver control in this while loop\n    while True:\n        user_control_drivetrain()\n        user_control_arm()\n        wait(20, MSEC)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n\ndef raise_hook():\n    HookMotor.set_velocity(100,PERCENT)\n    HookMotor.set_stopping(HOLD) # we want the hook to stay where it is\n    HookMotor.set_timeout(2,SECONDS) # incase the hook gets jammed or is not in right starting point, stop it after 2 seconds\n    HookMotor.spin_to_position(0,TURNS,wait=True)\n\ndef lower_hook():\n    HookMotor.set_velocity(100,PERCENT)\n    HookMotor.set_stopping(HOLD) # we want the hook to stay where it is\n    HookMotor.set_timeout(2,SECONDS) # incase the hook gets jammed or is not in right starting point, stop it after 2 seconds\n    HookMotor.spin_to_position(-HOOK_TURNS,TURNS,wait=True)\n\n\n","textLanguage":"python","robotConfig":[{"port":[2,4,1,3,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[17],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"ArmMotor","leftDir":"false","right":"PusherMotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[18],"name":"PusherMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"HookMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}